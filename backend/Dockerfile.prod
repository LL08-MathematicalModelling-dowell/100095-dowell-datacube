# Stage 1: Builder
FROM python:3.11-alpine AS builder

WORKDIR /usr/src/app

# Install system dependencies required for building Python packages
RUN apk add --no-cache gcc musl-dev libffi-dev postgresql-dev

# Upgrade pip and install dependencies
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Final Image
FROM python:3.11-alpine

WORKDIR /usr/src/app

# Create a non-root user for security
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Make installed packages available in global path
ENV PATH="/usr/local/bin:$PATH"

# Copy installed Python packages from builder
COPY --from=builder /root/.local /usr/local

# Copy Django project code
COPY . .

# Prepare staticfiles directory and assign permissions
RUN mkdir -p staticfiles && \
    chown -R appuser:appgroup staticfiles && \
    chown -R appuser:appgroup .

# Collect static files
RUN python manage.py collectstatic --noinput

# Run as non-root user
USER appuser

# Expose application port
EXPOSE 8000

# Start Gunicorn
CMD ["gunicorn", "--workers=3", "--bind=0.0.0.0:8000", "project.wsgi:application"]



# # Stage 1: Builder
# FROM python:3.11-alpine as builder

# WORKDIR /usr/src/app

# # Install build dependencies
# RUN apk add --no-cache gcc musl-dev libffi-dev postgresql-dev

# # Upgrade pip to the latest version
# RUN pip install --upgrade pip

# # Copy and install Python dependencies
# COPY ./requirements.txt /usr/src/app/requirements.txt
# RUN pip install --no-cache-dir --user -r requirements.txt

# # Stage 2: Final Image
# FROM python:3.11-alpine

# WORKDIR /usr/src/app

# # Create a non-root user
# RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# # Add /usr/local/bin to PATH so installed binaries (like gunicorn) are available
# ENV PATH="/usr/local/bin:$PATH"

# # Copy installed Python packages and application code
# COPY --from=builder /root/.local /usr/local
# COPY . /usr/src/app

# # Ensure that static files directory exists and has correct permissions
# RUN mkdir -p /usr/src/app/staticfiles && chown -R appuser:appgroup /usr/src/app/staticfiles

# # # Ensure the logs directory exists and set proper permissions
# # RUN mkdir -p /usr/src/app/logs && \
# #     chown -R appuser:appgroup /usr/src/app/logs && \
# #     chmod -R 775 /usr/src/app/logs

# # Change ownership to the non-root user
# RUN chown -R appuser:appgroup /usr/src/app

# # Run collectstatic to gather all static files
# RUN python manage.py collectstatic --noinput

# # Run the container as the non-root user
# USER appuser

# # Expose the port that the Django app will run on
# EXPOSE 8000

# CMD ["gunicorn", "--workers=3", "--bind=0.0.0.0:8000", "project.wsgi:application"]


