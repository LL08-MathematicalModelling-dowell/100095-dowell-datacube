datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// ==== AUTHENTICATION MODELS ====

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  apiKeys        ApiKey[]
  settings       Json            @default("{}")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  metadata      Metadata?
  operationLogs OperationLog[] // new relation
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model ApiKey {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  key         String    @unique
  description String?
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now()) @map("created_at")
  expiresAt   DateTime  @map("expires_at")
  isActive    Boolean   @default(true) @map("is_active")
  lastUsed    DateTime? @map("last_used")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ==== YOUR APP MODELS ====

model Metadata {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  databaseMetadata DatabaseMetadata[]
}

model DatabaseMetadata {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accessCount Int      @default(0)

  metadataId String   @db.ObjectId
  metadata   Metadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)

  collections CollectionMetadata[]
}

model CollectionMetadata {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  numberOfDocuments  Int      @default(0)
  accessCount        Int      @default(0)
  fields             String[]
  databaseMetadataId String   @db.ObjectId

  databaseMetadata DatabaseMetadata @relation(fields: [databaseMetadataId], references: [id], onDelete: Cascade)
}

/// New, typeâ€‘safe log of every read/write operation
enum OperationType {
  READ
  WRITE
  DELETE
}

enum ResourceType {
  DB
  COLLECTION
  DOCUMENT
}

model OperationLog {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  type         OperationType
  resourceType ResourceType
  count        Int           @default(1)
  resourceId   String        @db.ObjectId
  createdAt    DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, resourceType, resourceId, createdAt])
}
